#ifndef TEMPLATE_H
#define TEMPLATE_H

template <typename T>
class Array {
private:
    T *ptr;
    int size;
public:
    Array(T arr[], int s);
    void print();
};

#endif // TEMPLATE_H
---------------------------------------------------------------------------------------------------
#include "template.h"
#include <iostream>
using namespace std;

template <typename T>
Array<T>::Array(T arr[], int s) {
    ptr = new T[s];
    size = s;
    for(int i = 0; i < size; i++)
        ptr[i] = arr[i];
}

template <typename T>
void Array<T>::print() {
    for (int i = 0; i < size; i++)
        cout<<" "<<*(ptr + i);
    cout<<endl;
}
---------------------------------------------------------------------------------------------------
#include <template.cpp>

int main()
{
    int arr[5] = {1, 2, 3, 4, 5};
        Array<int> a(arr, 5);
        a.print();

        float arr2[5] = {1.5, 2.3, 3.4, 4.0, 5.9};
        Array<float> a2(arr2, 5);
        a2.print();
        return 0;
        system("pause");
}
---------------------------------------------------------------------------------------------------
