#ifndef PILHA_H
#define PILHA_H

class Node{
public:
    int D;
    Node *next;
    static Node *montaNode(int *DAT);
    static void desmontaNode(Node *P, int *DAT);
};

class stack{
private:
    void printAll();
    Node *TOP;
public:
    stack(){TOP = 0;}
    bool IsEmpty(){return !TOP;}
    bool Push(int *DAT);
    bool Pop(int *DAT);
};

#endif // PILHA_H

--------------------------------------------------------------------------------------------------------
#include <iostream>
#include "pilha.h"

Node *Node::montaNode(int *DAT){
    Node *AUX = new Node;
    if(AUX){
        AUX->D = *DAT;
        AUX->next = NULL;
    }
    return AUX;
}

void Node::desmontaNode(Node *P, int *DAT){
    if(P){
        *DAT = P->D;
        delete P;
    }
}

void stack::printAll(){
    Node *AUX = TOP;
    while(!AUX){
        std::cout<< AUX->D;
        AUX = AUX->next;
    }
    std::cout<< std::endl;
}

bool stack::Push(int *DAT){
    Node *P = Node::montaNode(DAT);
    if(!P)
        return false;
    P->next = TOP;
    TOP = P;
    //COMANDO PARA TESTE!!!
    //printAll();
    return true;
}

bool stack::Pop(int *DAT){
    if(!TOP)
        return false;
    Node *P = TOP;
    TOP = P->next;
    Node::desmontaNode(P,DAT);
    return true;
}

-------------------------------------------------------------------------------------------------------
