#include "matriz.cpp"

int main(){

    char arr[9] = {'a','b','c','d','e','f','g','h','i'};
    double arr2[9] = {1.1,2.1,3.5,4.2,5.6,6.8,7.3,8.1,9.5};
    int pos = 0;

    int linha, coluna;
    linha = 3;
    coluna = 3;

    Matriz<char> *matA = new Matriz<char>(linha,coluna);
    for(int i = 0; i < linha; i++){
        for(int j = 0; j < coluna; j++){
            matA-> setElemento(i, j, arr[pos]);
            pos++;
        }
    }
    matA->imprimeMatriz();

    linha = 3;
    coluna = 3;
    pos = 0;
    Matriz<double> *matB = new Matriz<double>(linha,coluna);
    for(int i = 0; i < linha; i++){
        for(int j = 0; j < coluna; j++){
            matB-> setElemento(i, j, arr2[pos]);
            pos++;
        }
    }
    matB->imprimeMatriz();
}
------------------------------------------------------------------------------------------------------------------------------------------
#include "matriz.h"

template <typename T>
Matriz<T>::Matriz(int linhas, int colunas):
    quantidadeDeLinhas(0),
    quantidadeDeColunas(0),
    ptMatriz(0)
{
    ptMatriz = new T[linhas*colunas];
    quantidadeDeLinhas = linhas;
    quantidadeDeColunas = colunas;
}

template <typename T>
T Matriz<T>::getElemento(int linha, int coluna)const{
    int pos = linha*quantidadeDeColunas+coluna;
    return *(ptMatriz+pos);
}

template <typename T>
void Matriz<T>::setElemento(int linha, int coluna, T elemento){
    int pos = linha*quantidadeDeColunas+coluna;
    *(ptMatriz+pos) = elemento;
}

template <typename T>
void Matriz<T>::imprimeMatriz(){
    cout << "\n";
    for(int i = 0; i < quantidadeDeLinhas; i++){
        for(int j = 0; j < quantidadeDeColunas; j++){
            cout << getElemento(i, j);
            cout << "  ";
        }
        cout << "\n";
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
#ifndef MATRIZ_H
#define MATRIZ_H
#include<iostream>
using namespace std;

template <typename T>
class Matriz
{
private:
    int quantidadeDeLinhas;
    int quantidadeDeColunas;
    T *ptMatriz;

public:
    Matriz(int linhas, int colunas);
    ~Matriz(){if(ptMatriz)delete[] ptMatriz;}
    int getQuantidadeDeLinhas()const{return quantidadeDeLinhas;}
    int getQuantidadeDeColunas()const{return quantidadeDeColunas;}
    T getElemento(int linha, int coluna)const;
    void setElemento(int linha, int coluna, T elemento);
    void imprimeMatriz();
    Matriz* operator +(Matriz const * const mat);
};
#endif // MATRIZ_H
------------------------------------------------------------------------------------------------------------------------------------------
